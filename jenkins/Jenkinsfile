pipeline {
    agent any
    environment {
        MAX_MEMORY = "3g"
        PORT = "6533:8096"
        ACTUATOR_PORT = "8081"
        PROFILE = "desenvolvimento"
        DOCKER_DEV = "docker --context dev"
        CONTAINER_NAME = "autenticacao-api-dev"
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
        APPLICATION_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        HARBOR_LOGIN = "https://harbor.xbrain.com.br/ -u ${HARBOR_USER} -p ${HARBOR_PASSWORD}"
        HARBOR_URL = "harbor.xbrain.com.br/conexao-claro-brasil/${CONTAINER_NAME}:${APPLICATION_TAG}"
        JAVA_OPTS = "-Xms1g -Xmx3g -Dspring.profiles.active=${PROFILE} -XX:+UseContainerSupport \
                                   -Dcom.sun.management.jmxremote.rmi.port=9092 \
                                   -Dcom.sun.management.jmxremote=true \
                                   -Dcom.sun.management.jmxremote.port=9092 \
                                   -Dcom.sun.management.jmxremote.ssl=false \
                                   -Dcom.sun.management.jmxremote.authenticate=false \
                                   -Dcom.sun.management.jmxremote.local.only=false \
                                   -Djava.rmi.server.hostname=192.168.1.40 \
                                   -Delastic.apm.service_name=${CONTAINER_NAME} \
                                   -Delastic.apm.server_url=http://192.168.2.64:8200 \
                                   -Delastic.apm.application_packages=br.com.xbrain"
    }
    tools {
        maven 'Maven3.6'
        jdk 'JDK11'
    }
    stages {
        stage('Package') {
            steps {
                sh 'mvn clean package -DskipTests=true'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn clean verify'
            }
        }
        stage('Sonar analisys') {
            environment {
                sonarPluginHome = tool 'SONAR_SCANNER'
            }
            steps {
                withSonarQubeEnv('sonar_dev_hom') {
                    sh '${sonarPluginHome}/bin/sonar-scanner'
                }
            }
        }
        stage('Quality gate') {
            steps {
                sleep(60)
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage('Build and push') {
            steps {
                sh '''
                    whoami
                    docker login ${HARBOR_LOGIN}
                    docker build -t ${CONTAINER_NAME}:${APPLICATION_TAG} .
                    docker tag ${CONTAINER_NAME}:${APPLICATION_TAG} ${HARBOR_URL}
                    docker push ${HARBOR_URL}
                '''
            }
        }
        stage('Deploy') {
            steps {
                sh '''
                    ${DOCKER_DEV} login ${HARBOR_LOGIN}
                    if ${DOCKER_DEV} ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}$"; then
                       ${DOCKER_DEV} stop ${CONTAINER_NAME}
                       ${DOCKER_DEV} rm ${CONTAINER_NAME}
                    fi
                    ${DOCKER_DEV} run -d \
                        --name=${CONTAINER_NAME} \
                        --restart=unless-stopped -p ${PORT} \
                        --net network_xbrain \
                        --memory ${MAX_MEMORY} \
                        --memory-swap=${MAX_MEMORY} \
                        -e JAVA_OPTS="${JAVA_OPTS}" \
                        -e MINIO_TOKEN="$MINIO_TOKEN" \
                        -e MINIO_SECRET="$MINIO_SECRET" \
                        -e ACTUATOR_PORT=${ACTUATOR_PORT} \
                        ${HARBOR_URL}
                '''
            }
        }
        stage('Container validation') {
            steps {
                script {
                    def String output
                    try {
                        retry("3") {
                            sleep time: 40, unit: 'SECONDS'
                            output = sh(returnStdout: true, script: "${DOCKER_DEV} inspect --format=\'{{json .State.Health.Status}}\' ${CONTAINER_NAME}").trim()
                            sh ''' echo ${output} '''
                            if (!output.equals("\"healthy\"")) {
                                script {
                                    error "status container ${output}!"
                                }
                            }
                        }
                    } catch (error) {
                        if (!output.equals("\"healthy\"")) {
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
    }
}
