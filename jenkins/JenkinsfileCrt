def COLOR_MAP = [
        'SUCCESS': 'good',
        'FAILURE': 'danger',
        'UNSTABLE': 'warning',
]
pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }
    environment {
        MAX_MEMORY = "2g"
        PORT = "6573:8096"
        ACTUATOR_PORT = "8081"
        PROFILE = "certificacao"
        DOCKER_CRT = "docker --context crt"
        DOCKER_LOCAL = "docker --context default"
        CONTAINER_NAME = "autenticacao-api-crt"
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
        APPLICATION_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        HARBOR_LOGIN = "https://harbor.xbrain.com.br/ -u ${HARBOR_USER} -p ${HARBOR_PASSWORD}"
        HARBOR_URL = "harbor.xbrain.com.br/conexao-claro-brasil/${CONTAINER_NAME}:${APPLICATION_TAG}"
        CURRENT_IMAGE = sh(script: "${DOCKER_CRT} images --format '{{.Repository}}:{{.Tag}}' | grep -E /${CONTAINER_NAME}: || echo ''", returnStdout: true).trim()
        JAVA_OPTS = "-Xms256m -Xmx1024m -Dspring.profiles.active=${PROFILE} \
                                        -XX:+UseContainerSupport \
                                        -Dcom.sun.management.jmxremote.rmi.port=9092 \
                                        -Dcom.sun.management.jmxremote=true \
                                        -Dcom.sun.management.jmxremote.port=9092 \
                                        -Dcom.sun.management.jmxremote.ssl=false \
                                        -Dcom.sun.management.jmxremote.authenticate=false \
                                        -Dcom.sun.management.jmxremote.local.only=false \
                                        -Djava.rmi.server.hostname=192.168.1.40"
    }
    tools {
        maven 'Maven3.6'
        jdk 'JDK11'
    }
    stages {
        stage('Package') {
            steps {
                slackSend channel: '#env-certificacao',
                          color: COLOR_MAP[currentBuild.getPreviousBuild().result],
                          message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} Started by ${BUILD_USER} (<${env.BUILD_URL}|Open>)"
                sh 'mvn clean package -DskipTests=true'
            }
        }
        stage('Build and push') {
            steps {
                sh '''
                    docker login ${HARBOR_LOGIN}
                    docker build -t ${CONTAINER_NAME}:${APPLICATION_TAG} .
                    docker tag ${CONTAINER_NAME}:${APPLICATION_TAG} ${HARBOR_URL}
                    docker push ${HARBOR_URL}
                '''
            }
        }
        stage('Deploy') {
            steps {
                sh '''
                    ${DOCKER_CRT} login ${HARBOR_LOGIN}
                    if ${DOCKER_CRT} ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}$"; then
                       ${DOCKER_CRT} stop ${CONTAINER_NAME}
                       ${DOCKER_CRT} rm ${CONTAINER_NAME}
                    fi
                    ${DOCKER_CRT} run \
                       --name=${CONTAINER_NAME} \
                       --restart=unless-stopped \
                       -p ${PORT} \
                       -d \
                       -e JAVA_OPTS="${JAVA_OPTS}" \
                       -e ACTUATOR_PORT=${ACTUATOR_PORT} \
                       -e MINIO_TOKEN=${MINIO_TOKEN} \
                       -e MINIO_SECRET=${MINIO_SECRET} \
                       --net network_xbrain \
                       --memory ${MAX_MEMORY} \
                       --memory-swap=${MAX_MEMORY} \
                       ${HARBOR_URL}
                '''
            }
        }
        stage('Container validation') {
            steps {
                script {
                    def String output
                    try {
                        retry("3") {
                            sleep time: 40, unit: 'SECONDS'
                            output = sh(returnStdout: true, script: "${DOCKER_CRT} inspect --format=\'{{json .State.Health.Status}}\' ${CONTAINER_NAME}").trim()
                            sh ''' echo ${output} '''
                            if (!output.equals("\"healthy\"")) {
                                script {
                                    error "status container ${output}!"
                                }
                            } else {
                                sh '''
                                    if [ -n "$CURRENT_IMAGE" ]; then
                                       ${DOCKER_CRT} image rm ${CURRENT_IMAGE}
                                    fi
                                    ${DOCKER_LOCAL} image rm ${HARBOR_URL}
                                    ${DOCKER_LOCAL} rmi ${CONTAINER_NAME}:${APPLICATION_TAG}
                                    if ${DOCKER_LOCAL} images | awk '{print $1":"$2}' | grep -Eq "^${CURRENT_IMAGE}$"; then
                                       ${DOCKER_LOCAL} image rm ${CURRENT_IMAGE}
                                    fi
                                    if ${DOCKER_LOCAL} images | awk '{print $1":"$2}' | grep -Eq ^$(echo "${CURRENT_IMAGE}" | awk -F'/' '{print $NF}')$; then
                                       ${DOCKER_LOCAL} rmi $(echo ${CURRENT_IMAGE} | awk -F'/' '{print $NF}')
                                    fi
                                '''
                            }
                        }
                    } catch (error) {
                        if (!output.equals("\"healthy\"")) {
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        stage('Rollback') {
            when {
                expression { currentBuild.result == 'UNSTABLE' }
            }
            steps('Realizando rollback') {
                sh '''
                    if ${DOCKER_CRT} ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}$"; then
                       ${DOCKER_CRT} stop ${CONTAINER_NAME}
                       ${DOCKER_CRT} rm ${CONTAINER_NAME}
                    fi
                    if ${DOCKER_CRT} images | awk '{print $1":"$2}' | grep -Eq "^${HARBOR_URL}$"; then
                       ${DOCKER_CRT} image rm ${HARBOR_URL}
                    fi
                    ${DOCKER_LOCAL} image rm ${HARBOR_URL}
                    ${DOCKER_LOCAL} rmi ${CONTAINER_NAME}:${APPLICATION_TAG}
                    if ${DOCKER_LOCAL} images | grep -Eq $(echo "^${CONTAINER_NAME}$" | awk -F'/' '{print $NF}'); then
                       ${DOCKER_LOCAL} rmi $(echo ${HARBOR_URL} | awk -F'/' '{print $NF}')
                    fi
                    if ${DOCKER_LOCAL} images | awk '{print $1":"$2}' | grep -Eq "^${CURRENT_IMAGE}$"; then
                       ${DOCKER_LOCAL} image rm ${CURRENT_IMAGE}
                    fi
                    if ${DOCKER_LOCAL} images | awk '{print $1":"$2}' | grep -Eq ^$(echo "${CURRENT_IMAGE}" | awk -F'/' '{print $NF}')$; then
                       ${DOCKER_LOCAL} rmi $(echo ${CURRENT_IMAGE} | awk -F'/' '{print $NF}')
                    fi

                    if [ -n "$CURRENT_IMAGE" ]; then
                       ${DOCKER_CRT} run \
                          --name=${CONTAINER_NAME} \
                          --restart=unless-stopped \
                          -p ${PORT} \
                          -d \
                          -e JAVA_OPTS="${JAVA_OPTS}" \
                          -e ACTUATOR_PORT=${ACTUATOR_PORT} \
                          -e MINIO_TOKEN=${MINIO_TOKEN} \
                          -e MINIO_SECRET=${MINIO_SECRET} \
                          --net network_xbrain \
                          --memory ${MAX_MEMORY} \
                          --memory-swap=${MAX_MEMORY} \
                          ${CURRENT_IMAGE}
                    else
                       echo "Current image not found: ${CURRENT_IMAGE}"
                    fi
                '''
            }
        }
    }
    post {
        always {
            slackSend channel: '#env-certificacao',
                      color: COLOR_MAP[currentBuild.currentResult],
                      message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} ${currentBuild.currentResult} after ${currentBuild.durationString.replace(' and counting', '')} (<${env.BUILD_URL}|Open>)"
        }
        unstable {
            script {
                if (env.CURRENT_IMAGE) {
                    slackSend channel: '#env-certificacao',
                        color: COLOR_MAP[currentBuild.currentResult],
                        message: "${XBRAIN_LIDERES} ${env.JOB_NAME} - Build #${env.BUILD_NUMBER} ${currentBuild.currentResult} Falha ao realizar deploy ${APPLICATION_TAG} rollback para ${CURRENT_IMAGE}"
                }
            }
        }
    }
}
